{"version":3,"sources":["components/map/Loading.jsx","utils/colors.js","components/map/CovidMap.jsx","components/map/Legend.jsx","entities/LegendItem.js","entities/LegendItems.js","components/precleaning/LoadCountriesTask.js","components/map/Covid19.jsx","components/chart/Chart1.js","components/chart/Chart2.js","components/views/InsightPage.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Loading","a","createElement","style","height","display","justifyContent","className","role","d","__webpack_exports__","getColor","availableColor","arguments","length","undefined","window","getComputedStyle","document","documentElement","getPropertyValue","concat","CovidMap","_ref","countries","react_default","MapContainer","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedText","bindPopup","Legend","legendItems","alignItems","map","item","key","title","backgroundColor","flex","textColor","fontWeight","fontSize","LegendItem","isFor","Object","classCallCheck","this","cases","LoadCountriesTask","today","moment","format","yesterday","subtract","nowddd","nowHH","setState","mapCountries","features","yesterdayDefcnt","todayDefcnt","getDay","_this","filtercnt","nation","cnt","filter","nationNmEn","indexOf","index","todayNatDefCnt","load","_callee","regenerator_default","wrap","_context","prev","next","Axios","get","then","res","body","response","items","objectSpread","natDefCnt","classPrivateFieldLooseBase","_processCovidData","stop","covidCountries","_loop","i","mapCountry","covidCountry","find","ISO_A3","confirmed","Number","_formatNumberWithCommas","_setCountryColor","legendItem","number","toString","replace","Covid19","_useState","useState","_useState2","slicedToArray","setCountries","legendItemsReverse","toConsumableArray","reverse","useEffect","components_map_CovidMap","map_Legend","Chart1","Load","setLoad","_useState3","_useState4","ConfirmedData","setConfirmedData","arrReverse","arr","scrollTo","dtData","makeWeek","post","makeData","labeling","labels","month","date","datasets","label","borderColor","borderWidth","fill","careCnt","year","createDt","createdt","enddt","hour","parseInt","Card","CardHeader","CardBody","es","Chart2","console","log","decideCnt","InsightPage","props","Page","Row","Col","map_Covid19","xl","lg","md","chart_Chart1","chart_Chart2"],"mappings":"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","file":"static/js/10.e3b90a75.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div style={{height:\"70h\",display:\"flex\", justifyContent:\"center\"}}>\r\n     <div className=\"spinner-grow text-warning\" role=\"status\">\r\n        <span className=\"visually-hidden\"></span>\r\n     </div>\r\n     <div className=\"spinner-grow text-warning\" role=\"status\">\r\n        <span className=\"visually-hidden\"></span>\r\n     </div>\r\n     <div className=\"spinner-grow text-warning\" role=\"status\">\r\n        <span className=\"visually-hidden\"></span>\r\n     </div>\r\n    </div>\r\n    );\r\n};\r\n \r\nexport default Loading;","// const availableColors = [\r\n//   'blue',\r\n//   'indigo',\r\n//   'purple',\r\n//   'pink',\r\n//   'red',\r\n//   'orange',\r\n//   'yellow',\r\n//   'green',\r\n//   'teal',\r\n//   'cyan',\r\n//   'white',\r\n//   'gray',\r\n//   'gray-dark',\r\n//   'primary',\r\n//   'secondary',\r\n//   'success',\r\n//   'info',\r\n//   'warning',\r\n//   'danger',\r\n//   'light',\r\n//   'dark',\r\n// ];\r\n\r\nexport const getColor = (availableColor = 'primary') => {\r\n  if (typeof window === 'undefined') {\r\n    return null;\r\n  }\r\n\r\n  const color = window\r\n    .getComputedStyle(document.documentElement)\r\n    .getPropertyValue(`--${availableColor}`);\r\n\r\n  return color;\r\n};\r\n\r\nexport const getThemeColors = () => [\r\n  'primary',\r\n  'secondary',\r\n  'success',\r\n  'info',\r\n  'warning',\r\n  'danger',\r\n];\r\n","import React from 'react'\r\nimport {MapContainer, GeoJSON} from \"react-leaflet\"\r\nimport \"leaflet/dist/leaflet.css\"\r\nimport \"./CovidMap.css\"\r\n\r\nconst CovidMap = ({countries}) => {\r\n    const mapStyle ={\r\n        fillColor:\"white\",\r\n        weight:2,\r\n        color:\"black\",\r\n        fillOpacity:1,\r\n    };\r\n    \r\n    const onEachCountry = (country, layer) => {\r\n        layer.options.fillColor = country.properties.color;\r\n        const name = country.properties.ADMIN;\r\n        const confirmedText = country.properties.confirmedText;\r\n        layer.bindPopup(`${name} ${confirmedText}`);\r\n      };\r\n\r\n      return (\r\n        <MapContainer style={{ height: \"50vh\" }} zoom={2} center={[20, 60]}>\r\n          <GeoJSON\r\n            style={mapStyle}\r\n            data={countries}\r\n            onEachFeature={onEachCountry}\r\n          />\r\n        </MapContainer>\r\n      );\r\n    };\r\n \r\nexport default CovidMap;","import React from \"react\";\r\n\r\nconst Legend = ({ legendItems }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"stretch\",\r\n      }}\r\n    >\r\n      {legendItems.map((item) => (\r\n        <div\r\n          key={item.title}\r\n          style={{\r\n            backgroundColor: item.color,\r\n            flex: 1,\r\n            display: \"flex\",\r\n            alignItems: \"center\", // vertical\r\n            justifyContent: \"center\", // horiztontal\r\n            color: item.textColor != null ? item.textColor : \"black\",\r\n            fontWeight: \"bolder\",\r\n            fontSize: \"1em\",\r\n            height: \"7vh\",\r\n          }}\r\n        >\r\n          <span>{item.title}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;","class LegendItem {\r\n    constructor(title, color, isFor, textColor) {\r\n      this.title = title;\r\n      this.color = color;\r\n      this.isFor = isFor;\r\n      this.textColor = textColor != null ? textColor : textColor;\r\n    }\r\n  }\r\n  \r\n  export default LegendItem;","import LegendItem from \"entities/LegendItem.js\";\r\n\r\nvar legendItems = [\r\n  new LegendItem(\r\n    \"10,000 +\",\r\n    \"#741f1f\",\r\n    // \"#8b0000\",\r\n    (cases) => cases >= 10000,\r\n    \"white\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"5,000 - 9,999\",\r\n    // \"#741f1f\",\r\n    \"#9c2929\",\r\n    (cases) => cases >= 5000 && cases <10000,\r\n    \"White\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"1,000 - 4,999\",\r\n    \"#c57f7f\",\r\n    (cases) => cases >= 1000 && cases < 5000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"500 - 999\",\r\n    \"#d8aaaa\",\r\n    (cases) => cases >= 500 && cases < 1000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"0 - 500\",\r\n    \"#ebd4d4\",\r\n    (cases) => cases > 0 && cases < 500\r\n  ),\r\n\r\n  new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\r\n];\r\n\r\nexport default legendItems;\r\n\r\n/**\r\n * 7 > 1 million                        #8b0000\r\n * 6 >= 500 thousand < 1 million        #9e2a2a\r\n * 5 >= 200 thousand < 500 thousand     #b15555\r\n * 4 >= 100 thousand  < 200 Thousand    #c57f7f\r\n * 3 > 50 thousand < 100 thousand       #d8aaaa\r\n * 2 >= 0 < 50 thousand                 #ebd4d4\r\n * 1 NO DATA                            #ffffff\r\n */\r\n\r\n/*\r\n\r\n#741f1f // Really red\r\n#9c2929 // more red\r\n#c57f7f // red\r\n#d8aaaa //more pink\r\n#ebd4d4 //pink\r\n#ffffff //white\r\n*/","import Axios from 'axios';\r\nimport moment from 'moment';\r\nimport { features } from 'assets/geo-data/countries.json';\r\nimport legendItems from '../../entities/LegendItems';\r\nclass LoadCountriesTask {\r\n  today = moment().format('YYYYMMDD');\r\n  yesterday = moment().subtract(1, 'days').format('YYYYMMDD');\r\n  nowddd = moment().format('ddd');\r\n  nowHH = moment().format('HH');\r\n  setState = null;\r\n  mapCountries = features;\r\n  yesterdayDefcnt = [];\r\n  todayDefcnt = [];\r\n\r\n  getDay = () => {\r\n    if (this.nowddd == 'Sun') {\r\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(1, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowddd == 'Mon') {\r\n      this.today = moment(this.today).subtract(2, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(2, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowddd == 'Tue' && this.nowHH < 12) {\r\n      this.today = moment(this.today).subtract(3, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(3, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowHH < 12) {\r\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(1, 'days')\r\n        .format('YYYYMMDD');\r\n    }\r\n  };\r\n\r\n  filtercnt = nation => {\r\n    this.cnt = 0;\r\n    this.todayDefcnt\r\n      .filter(item => item.nationNmEn.indexOf(nation) != -1)\r\n      .map((item, index) => {\r\n        if (nation === item.nationNmEn) {\r\n          this.cnt = item.todayNatDefCnt;\r\n        }\r\n      });\r\n    return this.cnt;\r\n  };\r\n\r\n  load = async setState => {\r\n    this.setState = setState;\r\n    this.getDay();\r\n    await Axios.get(`api/info/YesterdayCovid19Nat/${this.yesterday}`).then(\r\n      res => {\r\n        this.yesterdayDefcnt = res.data.data.body.response.body.items.item;\r\n      },\r\n    );\r\n    await Axios.get(`api/info/TodayCovid19Nat/${this.today}`).then(res => {\r\n      this.todayDefcnt = res.data.data.body.response.body.items.item;\r\n    });\r\n\r\n    this.todayDefcnt.map((item, index) => {\r\n      this.todayDefcnt[index] = {\r\n        ...this.todayDefcnt[index],\r\n        todayNatDefCnt: item.natDefCnt - this.yesterdayDefcnt[index].natDefCnt,\r\n      };\r\n    });\r\n\r\n    this.mapCountries.map((item, index) => {\r\n      item.properties = {\r\n        ...item.properties,\r\n        natDefCnt: this.filtercnt(item.properties.ADMIN),\r\n      };\r\n    });\r\n    this.#processCovidData(this.mapCountries);\r\n  };\r\n\r\n  #processCovidData = covidCountries => {\r\n    for (let i = 0; i < this.mapCountries.length; i++) {\r\n      const mapCountry = this.mapCountries[i];\r\n      const covidCountry = covidCountries.find(\r\n        covidCountry =>\r\n          covidCountry.properties.ISO_A3 === mapCountry.properties.ISO_A3,\r\n      );\r\n\r\n      mapCountry.properties.confirmed = 0;\r\n      mapCountry.properties.confirmedText = '0';\r\n\r\n      if (covidCountry != null) {\r\n        const confirmed = Number(covidCountry.properties.natDefCnt);\r\n        mapCountry.properties.confirmed = confirmed;\r\n        mapCountry.properties.confirmedText =\r\n          this.#formatNumberWithCommas(confirmed);\r\n      }\r\n\r\n      this.#setCountryColor(mapCountry);\r\n    }\r\n\r\n    this.setState(this.mapCountries);\r\n  };\r\n\r\n  #setCountryColor = country => {\r\n    const legendItem = legendItems.find(item =>\r\n      item.isFor(country.properties.confirmed),\r\n    );\r\n\r\n    if (legendItem != null) country.properties.color = legendItem.color;\r\n  };\r\n\r\n  #formatNumberWithCommas = number => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  };\r\n}\r\n\r\nexport default LoadCountriesTask;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Loading from './Loading';\r\nimport CovidMap from './CovidMap';\r\nimport Legend from './Legend';\r\nimport LoadCountriesTask from 'components/precleaning/LoadCountriesTask';\r\nimport legendItems from '../../entities/LegendItems';\r\n\r\nconst Covid19 = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const legendItemsReverse = [...legendItems].reverse();\r\n  const load = () => {\r\n    const loadCountriesTask = new LoadCountriesTask();\r\n    loadCountriesTask.load(setCountries);\r\n  };\r\n\r\n  useEffect(load, []);\r\n\r\n  return (\r\n    <div>\r\n      {countries.length === 0 ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <CovidMap countries={countries} />\r\n          <Legend legendItems={legendItemsReverse} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Covid19;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport Loading from '../map/Loading';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { getColor } from 'utils/colors';\r\n\r\nfunction Chart1() {\r\n  const [Load, setLoad] = useState(true);\r\n  const [ConfirmedData, setConfirmedData] = useState({});\r\n  let arrReverse = [];\r\n  let arr = [];\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    let dtData = makeWeek();\r\n    Axios.post(`/api/info/Covid19Chart1`, dtData).then(res => {\r\n      makeData(res.data.data.body.response.body.items.item);\r\n      arrReverse = [...arr].reverse();\r\n      setLoad(false);\r\n      labeling();\r\n    });\r\n  }, []);\r\n\r\n  const labeling = () => {\r\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\r\n    setConfirmedData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: '국내 치료 중인 환자 수',\r\n          backgroundColor: getColor('primary'),\r\n          borderColor: getColor('primary'),\r\n          borderWidth: 2,\r\n          fill: false,\r\n          data: arrReverse.map(a => a.careCnt),\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const makeData = items => {\r\n    items.map(item => {\r\n      arr = [\r\n        ...arr,\r\n        {\r\n          year: moment(item.createDt).format('YY'),\r\n          month: moment(item.createDt).format('MM'),\r\n          date: moment(item.createDt).format('DD'),\r\n          careCnt: item.careCnt,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const makeWeek = () => {\r\n    let hour = moment().format('HH');\r\n    let createdt;\r\n    let enddt;\r\n\r\n    if(parseInt(hour)<10){\r\n      createdt = moment().subtract(7, 'days').format('YYYYMMDD');\r\n      enddt = moment().subtract(1, 'days').format('YYYYMMDD');\r\n    } else {\r\n      createdt = moment().subtract(6, 'days').format('YYYYMMDD');\r\n      enddt = moment().format('YYYYMMDD');\r\n    }\r\n\r\n    let dtdata = {\r\n      createdt: createdt,\r\n      enddt: enddt,\r\n    }\r\n\r\n    return dtdata;\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>국내 치료 중인 환자 수</CardHeader>\r\n      <CardBody>\r\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Chart1;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport { getCovid19InfStateJson_URL, chanbi_key } from '../Config';\r\nimport Loading from '../map/Loading';\r\nimport { Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { getColor } from 'utils/colors';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction Chart2() {\r\n  const [Load, setLoad] = useState(true);\r\n  const [ConfirmedData, setConfirmedData] = useState({});\r\n  let arr = [];\r\n  let arrReverse = [];\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    let dtData = makeWeek();\r\n    console.log(dtData);\r\n    Axios.post(`/api/info/Covid19Chart2`, dtData).then(res => {\r\n      makeData(res.data.data.body.response.body.items.item);\r\n      arrReverse = [...arr].reverse();\r\n      setLoad(false);\r\n      labeling();\r\n    });\r\n  }, []);\r\n\r\n  const labeling = () => {\r\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\r\n    setConfirmedData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: '국내 누적 확진자',\r\n          backgroundColor: getColor('secondary'),\r\n          borderColor: getColor('secondary'),\r\n          borderWidth: 2,\r\n          fill: false,\r\n          data: arrReverse.map(a => a.decideCnt),\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const makeData = items => {\r\n    items.map(item => {\r\n      arr = [\r\n        ...arr,\r\n        {\r\n          year: moment(item.createDt).format('YY'),\r\n          month: moment(item.createDt).format('MM'),\r\n          date: moment(item.createDt).format('DD'),\r\n          decideCnt: item.decideCnt,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const makeWeek = () => {\r\n    let hour = moment('2021-11-26 09:00:00','YYYY-MM-DD HH:mm:ss').format('HH');\r\n    let createdt;\r\n    let enddt;\r\n\r\n    if(parseInt(hour)<10){\r\n      createdt = moment().subtract(7, 'days').format('YYYYMMDD');\r\n      enddt = moment().subtract(1, 'days').format('YYYYMMDD');\r\n    } else {\r\n      createdt = moment().subtract(6, 'days').format('YYYYMMDD');\r\n      enddt = moment().format('YYYYMMDD');\r\n    }\r\n\r\n    let dtdata = {\r\n      createdt: createdt,\r\n      enddt: enddt,\r\n    }\r\n\r\n    return dtdata;\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>국내 누적 확진자</CardHeader>\r\n      <CardBody>\r\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Chart2;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Covid19 from 'components/map/Covid19.jsx';\r\nimport Chart1 from '../chart/Chart1';\r\nimport Chart2 from '../chart/Chart2';\r\nimport Page from 'components/Page';\r\nimport { Col, Row } from 'reactstrap';\r\n\r\nfunction InsightPage(props) {\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <Page>\r\n      <Row>\r\n        <Col>\r\n          <Covid19 />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xl={6} lg={12} md={12}>\r\n          <Chart1 />\r\n        </Col>\r\n        <Col xl={6} lg={12} md={12}>\r\n          <Chart2 />\r\n        </Col>\r\n      </Row>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default InsightPage;\r\n"],"sourceRoot":""}