{"version":3,"sources":["components/map/CovidMap.jsx","components/map/Legend.jsx","entities/LegendItem.js","entities/LegendItems.js","components/precleaning/LoadCountriesTask.js","components/map/Covid19.jsx","components/chart/Chart1.js","components/chart/Chart2.js","components/chart/VisitorsMain.js","components/views/InsightPage.js"],"names":["CovidMap","_ref","countries","react_default","a","createElement","MapContainer","style","height","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedText","bindPopup","concat","Legend","legendItems","display","alignItems","map","item","key","title","backgroundColor","flex","justifyContent","textColor","fontWeight","fontSize","LegendItem","isFor","Object","classCallCheck","this","cases","LoadCountriesTask","today","moment","format","yesterday","subtract","nowddd","nowHH","setState","mapCountries","features","yesterdayDefcnt","todayDefcnt","getDay","_this","filtercnt","nation","cnt","filter","nationNmEn","indexOf","index","todayNatDefCnt","load","_callee","regenerator_default","wrap","_context","prev","next","Axios","get","then","res","body","response","items","objectSpread","natDefCnt","classPrivateFieldLooseBase","_processCovidData","stop","covidCountries","_loop","i","mapCountry","covidCountry","find","ISO_A3","confirmed","Number","_formatNumberWithCommas","_setCountryColor","length","legendItem","number","toString","replace","Covid19","_useState","useState","_useState2","slicedToArray","setCountries","legendItemsReverse","toConsumableArray","reverse","useEffect","Loading","components_map_CovidMap","map_Legend","Chart1","Load","setLoad","_useState3","_useState4","ConfirmedData","setConfirmedData","arrReverse","arr","window","scrollTo","dtData","makeWeek","post","makeData","labeling","labels","month","date","datasets","label","getColor","borderColor","borderWidth","fill","careCnt","year","createDt","accExamCnt","createdt","enddt","hour","parseInt","Card","CardHeader","CardBody","es","Chart2","decideCnt","VisitorsMain","setLoadD","MONTHS","MONTHS2","colors","leaveKr","_useState5","_useState6","list","setlist","asyncToGenerator","mark","filterTenNation","apply","arguments","tmp","visitors","Fragment","Col","xl","lg","md","num","genLineData","InsightPage","props","sysToday","ReferencDate","substr","day","Page","className","description","breadcrumbs","active","Row","map_Covid19","chart_VisitorsMain","chart_Chart1","chart_Chart2"],"mappings":"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","file":"static/js/11.69bf8b77.chunk.js","sourcesContent":["import React from 'react';\nimport { MapContainer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './CovidMap.css';\n\nconst CovidMap = ({ countries }) => {\n  const mapStyle = {\n    fillColor: 'white',\n    weight: 2,\n    color: 'black',\n    fillOpacity: 1,\n  };\n\n  const onEachCountry = (country, layer) => {\n    layer.options.fillColor = country.properties.color;\n    const name = country.properties.ADMIN;\n    const confirmedText = country.properties.confirmedText;\n    layer.bindPopup(`${name} ${confirmedText}`);\n  };\n\n  return (\n    <MapContainer style={{ height: '50vh' }} zoom={2} center={[20, 60]}>\n      <GeoJSON\n        style={mapStyle}\n        data={countries}\n        onEachFeature={onEachCountry}\n      />\n    </MapContainer>\n  );\n};\n\nexport default CovidMap;\n","import React from \"react\";\n\nconst Legend = ({ legendItems }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"stretch\",\n      }}\n    >\n      {legendItems.map((item) => (\n        <div\n          key={item.title}\n          style={{\n            backgroundColor: item.color,\n            flex: 1,\n            display: \"flex\",\n            alignItems: \"center\", // vertical\n            justifyContent: \"center\", // horiztontal\n            color: item.textColor != null ? item.textColor : \"black\",\n            fontWeight: \"bolder\",\n            fontSize: \"1em\",\n            height: \"7vh\",\n          }}\n        >\n          <span>{item.title}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Legend;","class LegendItem {\n    constructor(title, color, isFor, textColor) {\n      this.title = title;\n      this.color = color;\n      this.isFor = isFor;\n      this.textColor = textColor != null ? textColor : textColor;\n    }\n  }\n  \n  export default LegendItem;","import LegendItem from \"entities/LegendItem.js\";\n\nvar legendItems = [\n  new LegendItem(\n    \"10,000 +\",\n    \"#741f1f\",\n    // \"#8b0000\",\n    (cases) => cases >= 10000,\n    \"white\"\n  ),\n\n  new LegendItem(\n    \"5,000 - 9,999\",\n    // \"#741f1f\",\n    \"#9c2929\",\n    (cases) => cases >= 5000 && cases <10000,\n    \"White\"\n  ),\n\n  new LegendItem(\n    \"1,000 - 4,999\",\n    \"#c57f7f\",\n    (cases) => cases >= 1000 && cases < 5000\n  ),\n\n  new LegendItem(\n    \"500 - 999\",\n    \"#d8aaaa\",\n    (cases) => cases >= 500 && cases < 1000\n  ),\n\n  new LegendItem(\n    \"0 - 500\",\n    \"#ebd4d4\",\n    (cases) => cases > 0 && cases < 500\n  ),\n\n  new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\n];\n\nexport default legendItems;\n\n/**\n * 7 > 1 million                        #8b0000\n * 6 >= 500 thousand < 1 million        #9e2a2a\n * 5 >= 200 thousand < 500 thousand     #b15555\n * 4 >= 100 thousand  < 200 Thousand    #c57f7f\n * 3 > 50 thousand < 100 thousand       #d8aaaa\n * 2 >= 0 < 50 thousand                 #ebd4d4\n * 1 NO DATA                            #ffffff\n */\n\n/*\n\n#741f1f // Really red\n#9c2929 // more red\n#c57f7f // red\n#d8aaaa //more pink\n#ebd4d4 //pink\n#ffffff //white\n*/","import Axios from 'axios';\nimport moment from 'moment';\nimport { features } from 'assets/geo-data/countries.json';\nimport legendItems from '../../entities/LegendItems';\nclass LoadCountriesTask {\n  today = moment().format('YYYYMMDD');\n  yesterday = moment().subtract(1, 'days').format('YYYYMMDD');\n  nowddd = moment().format('ddd');\n  nowHH = moment().format('HH');\n  setState = null;\n  mapCountries = features;\n  yesterdayDefcnt = [];\n  todayDefcnt = [];\n\n  getDay = () => {\n    if (this.nowddd == 'Sun') {\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\n      this.yesterday = moment(this.yesterday)\n        .subtract(1, 'days')\n        .format('YYYYMMDD');\n    } else if (this.nowddd == 'Mon') {\n      this.today = moment(this.today).subtract(2, 'days').format('YYYYMMDD');\n      this.yesterday = moment(this.yesterday)\n        .subtract(2, 'days')\n        .format('YYYYMMDD');\n    } else if (this.nowddd == 'Tue' && this.nowHH < 12) {\n      this.today = moment(this.today).subtract(3, 'days').format('YYYYMMDD');\n      this.yesterday = moment(this.yesterday)\n        .subtract(3, 'days')\n        .format('YYYYMMDD');\n    } else if (this.nowddd == 'Tue' && this.nowHH >= 12) {\n      this.yesterday = moment(this.yesterday)\n        .subtract(2, 'days')\n        .format('YYYYMMDD');\n    } else if (this.nowddd == 'Wed' && this.nowHH < 12) {\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\n      this.yesterday = moment(this.yesterday)\n        .subtract(3, 'days')\n        .format('YYYYMMDD');\n    } else if (this.nowHH < 12) {\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\n      this.yesterday = moment(this.yesterday)\n        .subtract(1, 'days')\n        .format('YYYYMMDD');\n    }\n  };\n\n  filtercnt = nation => {\n    this.cnt = 0;\n    this.todayDefcnt\n      .filter(item => item.nationNmEn.indexOf(nation) != -1)\n      .map((item, index) => {\n        if (nation === item.nationNmEn) {\n          this.cnt = item.todayNatDefCnt;\n        }\n      });\n    return this.cnt;\n  };\n\n  load = async setState => {\n    this.setState = setState;\n    this.getDay();\n    await Axios.get(`api/info/YesterdayCovid19Nat/${this.yesterday}`).then(\n      res => {\n        this.yesterdayDefcnt = res.data.data.body.response.body.items.item;\n      },\n    );\n    await Axios.get(`api/info/TodayCovid19Nat/${this.today}`).then(res => {\n      this.todayDefcnt = res.data.data.body.response.body.items.item;\n    });\n\n    this.todayDefcnt.map((item, index) => {\n      this.todayDefcnt[index] = {\n        ...this.todayDefcnt[index],\n        todayNatDefCnt: item.natDefCnt - this.yesterdayDefcnt[index].natDefCnt,\n      };\n    });\n\n    this.mapCountries.map((item, index) => {\n      item.properties = {\n        ...item.properties,\n        natDefCnt: this.filtercnt(item.properties.ADMIN),\n      };\n    });\n    this.#processCovidData(this.mapCountries);\n  };\n\n  #processCovidData = covidCountries => {\n    for (let i = 0; i < this.mapCountries.length; i++) {\n      const mapCountry = this.mapCountries[i];\n      const covidCountry = covidCountries.find(\n        covidCountry =>\n          covidCountry.properties.ISO_A3 === mapCountry.properties.ISO_A3,\n      );\n\n      mapCountry.properties.confirmed = 0;\n      mapCountry.properties.confirmedText = '0';\n\n      if (covidCountry != null) {\n        const confirmed = Number(covidCountry.properties.natDefCnt);\n        mapCountry.properties.confirmed = confirmed;\n        mapCountry.properties.confirmedText =\n          this.#formatNumberWithCommas(confirmed);\n      }\n\n      this.#setCountryColor(mapCountry);\n    }\n\n    this.setState(this.mapCountries);\n  };\n\n  #setCountryColor = country => {\n    const legendItem = legendItems.find(item =>\n      item.isFor(country.properties.confirmed),\n    );\n\n    if (legendItem != null) country.properties.color = legendItem.color;\n  };\n\n  #formatNumberWithCommas = number => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n}\n\nexport default LoadCountriesTask;\n","import React, { useState, useEffect } from 'react';\nimport Loading from './Loading';\nimport CovidMap from './CovidMap';\nimport Legend from './Legend';\nimport LoadCountriesTask from 'components/precleaning/LoadCountriesTask';\nimport legendItems from '../../entities/LegendItems';\n\nconst Covid19 = () => {\n  const [countries, setCountries] = useState([]);\n  const legendItemsReverse = [...legendItems].reverse();\n  const load = () => {\n    const loadCountriesTask = new LoadCountriesTask();\n    loadCountriesTask.load(setCountries);\n  };\n\n  useEffect(load, []);\n\n  return (\n    <div>\n      {countries.length === 0 ? (\n        <Loading />\n      ) : (\n        <div>\n          <CovidMap countries={countries} />\n          <Legend legendItems={legendItemsReverse} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Covid19;\n","import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport Loading from '../map/Loading';\nimport { Line } from 'react-chartjs-2';\nimport { Card, CardBody, CardHeader } from 'reactstrap';\nimport { getColor } from 'utils/colors';\n\nfunction Chart1() {\n  const [Load, setLoad] = useState(true);\n  const [ConfirmedData, setConfirmedData] = useState({});\n  let arrReverse = [];\n  let arr = [];\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    let dtData = makeWeek();\n    Axios.post(`/api/info/Covid19Chart1`, dtData).then(res => {\n      makeData(res.data.data.body.response.body.items.item);\n      arrReverse = [...arr].reverse();\n      setLoad(false);\n      labeling();\n    });\n  }, []);\n\n  const labeling = () => {\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\n    setConfirmedData({\n      labels,\n      datasets: [\n        {\n          label: '국내 누적 의심신고 검사자',\n          backgroundColor: getColor('primary'),\n          borderColor: getColor('primary'),\n          borderWidth: 2,\n          fill: false,\n          data: arrReverse.map(a => a.careCnt),\n        },\n      ],\n    });\n  };\n\n  const makeData = items => {\n    items.map(item => {\n      arr = [\n        ...arr,\n        {\n          year: moment(item.createDt).format('YY'),\n          month: moment(item.createDt).format('MM'),\n          date: moment(item.createDt).format('DD'),\n          careCnt: item.accExamCnt,\n        },\n      ];\n    });\n  };\n\n  const makeWeek = () => {\n    let hour = moment().format('HH');\n    let createdt;\n    let enddt;\n\n    if(parseInt(hour)<10){\n      createdt = moment().subtract(7, 'days').format('YYYYMMDD');\n      enddt = moment().subtract(1, 'days').format('YYYYMMDD');\n    } else {\n      createdt = moment().subtract(6, 'days').format('YYYYMMDD');\n      enddt = moment().format('YYYYMMDD');\n    }\n\n    let dtdata = {\n      createdt: createdt,\n      enddt: enddt,\n    }\n\n    return dtdata;\n  };\n\n  return (\n    <Card>\n      <CardHeader>국내 누적 의심신고 검사자</CardHeader>\n      <CardBody>\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\n      </CardBody>\n    </Card>\n  );\n}\n\nexport default Chart1;\n","import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport { getCovid19InfStateJson_URL, chanbi_key } from '../Config';\nimport Loading from '../map/Loading';\nimport { Card, CardBody, CardHeader } from 'reactstrap';\nimport { getColor } from 'utils/colors';\nimport { Line } from 'react-chartjs-2';\n\nfunction Chart2() {\n  const [Load, setLoad] = useState(true);\n  const [ConfirmedData, setConfirmedData] = useState({});\n  let arr = [];\n  let arrReverse = [];\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    let dtData = makeWeek();\n    Axios.post(`/api/info/Covid19Chart2`, dtData).then(res => {\n      makeData(res.data.data.body.response.body.items.item);\n      arrReverse = [...arr].reverse();\n      setLoad(false);\n      labeling();\n    });\n  }, []);\n\n  const labeling = () => {\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\n    setConfirmedData({\n      labels,\n      datasets: [\n        {\n          label: '국내 누적 확진자',\n          backgroundColor: getColor('primary'),\n          borderColor: getColor('primary'),\n          borderWidth: 2,\n          fill: false,\n          data: arrReverse.map(a => a.decideCnt),\n        },\n      ],\n    });\n  };\n\n  const makeData = items => {\n    items.map(item => {\n      arr = [\n        ...arr,\n        {\n          year: moment(item.createDt).format('YY'),\n          month: moment(item.createDt).format('MM'),\n          date: moment(item.createDt).format('DD'),\n          decideCnt: item.decideCnt,\n        },\n      ];\n    });\n  };\n\n  const makeWeek = () => {\n    let hour = moment().format('HH');\n    let createdt;\n    let enddt;\n\n    if(parseInt(hour)<10){\n      createdt = moment().subtract(7, 'days').format('YYYYMMDD');\n      enddt = moment().subtract(1, 'days').format('YYYYMMDD');\n    } else {\n      createdt = moment().subtract(6, 'days').format('YYYYMMDD');\n      enddt = moment().format('YYYYMMDD');\n    }\n\n    let dtdata = {\n      createdt: createdt,\n      enddt: enddt,\n    }\n\n    return dtdata;\n  };\n\n  return (\n    <Card>\n      <CardHeader>국내 누적 확진자</CardHeader>\n      <CardBody>\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\n      </CardBody>\n    </Card>\n  );\n}\n\nexport default Chart2;\n","import React, { useEffect, useState } from 'react';\nimport { Col, Card, CardBody, CardHeader } from 'reactstrap';\nimport { getColor } from 'utils/colors';\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\nimport Loading from '../map/Loading';\nimport { visitors } from '../../assets/geo-data/visitorsList.json';\n\nfunction VisitorsMain() {\n  const [Load, setLoad] = useState(true);\n  const [LoadD, setLoadD] = useState(true);\n  const MONTHS = [\n    '1월',\n    '2월',\n    '3월',\n    '4월',\n    '5월',\n    '6월',\n    '7월',\n    '8월',\n    '9월',\n    '10월',\n  ];\n  const MONTHS2 = [\n    '1월',\n    '2월',\n    '3월',\n    '4월',\n    '5월',\n    '6월',\n    '7월',\n    '8월',\n    '9월',\n  ];\n\n  const colors=[\n    'primary','pink','success','danger','warning','info','navy','blackgray','special'\n  ]\n\n  const leaveKr = [\n    86143, 68213, 79446, 71302, 75416, 73999, 116615, 101963, 137712, 124399,\n  ];\n  const [list, setlist] = useState([]);\n\n  useEffect(() => {\n    load();\n  }, []);\n  const load = async () => {\n    setlist(filterTenNation());\n  };\n\n  useEffect(() => {\n    if (list !== []) {\n      setLoad(false);\n      setLoadD(false);\n    }\n  }, [list]);\n\n  const filterTenNation = () => {\n    let tmp = [];\n    visitors\n      .filter(\n        item =>\n          item.name.indexOf('일본') != -1 ||\n          item.name.indexOf('태국') != -1 ||\n          item.name.indexOf('괌') != -1 ||\n          item.name.indexOf('싱가포르') != -1 ||\n          item.name.indexOf('독일') != -1 ||\n          item.name.indexOf('캐나다') != -1 ||\n          item.name.indexOf('멕시코') != -1 ||\n          item.name.indexOf('도미니카 공화국') != -1 ||\n          item.name.indexOf('오스트리아') != -1,\n      )\n      .map(data => {\n        if (\n          data.name === '일본' ||\n          data.name === '태국' ||\n          data.name === '괌' ||\n          data.name === '싱가포르' ||\n          data.name === '독일' ||\n          data.name === '캐나다' ||\n          data.name === '멕시코' ||\n          data.name === '도미니카 공화국' ||\n          data.name === '오스트리아'\n        ) {\n          tmp = [...tmp, data];\n        }\n      });\n    return tmp;\n  };\n\n  const genLineData = () => {\n    let data = [];\n    let tmp = {\n      label: ``,\n      backgroundColor: getColor('primary'),\n      borderColor: getColor('primary'),\n      borderWidth: 1,\n      data: [],\n      fill: false,\n    };\n    for (let i = 0; i < 8; i++) {\n      tmp = {\n        ...tmp,\n        label: list[i].name,\n        data: list[i].num,\n        backgroundColor: getColor(colors[i]),\n        borderColor: getColor(colors[i]),\n      };\n      data = [...data, tmp];\n    }\n    return {\n      labels: MONTHS2,\n      datasets: data,\n    };\n  };\n\n  const genBarData = data => {\n    return {\n      labels: MONTHS,\n      datasets: [\n        {\n          label: `한국 출국자 수`,\n          backgroundColor: getColor('primary'),\n          borderColor: getColor('primary'),\n          borderWidth: 1,\n          data: data,\n        },\n      ],\n    };\n  };\n\n  const genPieData = () => {\n    return {\n      datasets: [\n        {\n          data: [\n            20400, 2200, 1160, 573, 516, 394, 278, 229, 82, 34, 11, 4, 3, 1, 1,\n            111826,\n          ],\n          backgroundColor: [getColor('primary'), getColor('secondary')],\n          label: 'Dataset 1',\n        },\n      ],\n      labels: [\n        '미국',\n        '일본',\n        '터키',\n        '괌',\n        '싱가포르',\n        '대만',\n        '도미니카 공화국',\n        '슬로베니아',\n        '홍콩',\n        '스와질랜드',\n        '스리랑카',\n        '세이셸',\n        '모리셔스',\n        '마카오',\n        '세르비아',\n        '그 외 국가(목적지 불명?)',\n      ],\n    };\n  };\n\n  return (\n    <>\n      <Col xl={6} lg={12} md={12}>\n        <Card>\n          <CardHeader>2021년 월별 한국 출국자 수</CardHeader>\n          <CardBody>\n            {Load === true ? <Loading /> : <Bar data={genBarData(leaveKr)} />}\n          </CardBody>\n        </Card>\n      </Col>\n      <Col xl={6} lg={12} md={12}>\n        <Card>\n          <CardHeader>2021년 1월~9월 목적지 별 한국 출국자 수</CardHeader>\n          <CardBody>\n            {Load === true ? <Loading /> : <Line data={genLineData(leaveKr)} />}\n          </CardBody>\n        </Card>\n      </Col>\n      {/* <Col xl={6} lg={12} md={12}>\n        <Card>\n          <CardHeader>2021년 9월 목적지 별 출국자 수</CardHeader>\n          <CardBody>\n            {LoadD === true ? <Loading /> : <Doughnut data={genPieData()} />}\n          </CardBody>\n        </Card>\n      </Col> */}\n    </>\n  );\n}\n\nexport default VisitorsMain;\n","import React, { useEffect, useState } from 'react';\nimport Covid19 from 'components/map/Covid19.jsx';\nimport Chart1 from '../chart/Chart1';\nimport Chart2 from '../chart/Chart2';\nimport VisitorsMain from '../chart/VisitorsMain';\nimport Page from 'components/Page';\nimport { Col, Row } from 'reactstrap';\nimport moment from 'moment';\n\nfunction InsightPage(props) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  let nowddd = moment().format('ddd');\n  let nowHH = moment().format('HH');\n  let sysToday = moment().format('YYYYMMDD');\n\n  const getDay = () => {\n    let t = '';\n    if (nowddd == 'Sun') {\n      t = moment(sysToday).subtract(1, 'days').format('YYYYMMDD');\n    } else if (nowddd == 'Mon') {\n      t = moment(sysToday).subtract(2, 'days').format('YYYYMMDD');\n    } else if (nowddd == 'Tue' && nowHH < 12) {\n      t = moment(sysToday).subtract(3, 'days').format('YYYYMMDD');\n    } else if (nowddd == 'Tue' && nowHH >= 12) {\n      t = sysToday;\n    } else if (nowddd == 'Wed' && nowHH < 12) {\n      t = moment(sysToday).subtract(1, 'days').format('YYYYMMDD');\n    } else if (nowHH < 12) {\n      t = moment(sysToday).subtract(1, 'days').format('YYYYMMDD');\n    } else {\n      t = sysToday;\n    }\n    return t;\n  };\n\n  const ReferencDate = getDay();\n  ReferencDate.toString()\n  const year = ReferencDate.substr(0,4);\n  const month = ReferencDate.substr(4,2);\n  const day = ReferencDate.substr(6,2);\n\n  return (\n    <Page\n      className=\"InsightPage\"\n      title=\"여행 종합 도표\"\n      description={\"국가별 여행정보를 시각화하여 제공합니다. 지도를 클릭하여 일일 확진자 수를 확인해 보세요. (※ 한국시간 기준 \"+year+\"년 \"+ month +\"월 \"+ day+\"일에 업데이트 되었습니다.)\"}\n      breadcrumbs={[{ name: 'Insight', active: true }]}\n    >\n      <Row>\n        <Col>\n          <Covid19 />\n        </Col>\n      </Row>\n      <Row>\n        <VisitorsMain />\n      </Row>\n      <Row>\n        <Col xl={6} lg={12} md={12}>\n          <Chart1 />\n        </Col>\n        <Col xl={6} lg={12} md={12}>\n          <Chart2 />\n        </Col>\n      </Row>\n    </Page>\n  );\n}\n\nexport default InsightPage;\n"],"sourceRoot":""}