{"version":3,"sources":["components/map/CovidMap.jsx","components/map/Legend.jsx","entities/LegendItem.js","entities/LegendItems.js","components/precleaning/LoadCountriesTask.js","components/map/Covid19.jsx","components/chart/Chart1.js","components/chart/Chart2.js","components/chart/VisitorsMain.js","components/views/InsightPage.js"],"names":["CovidMap","_ref","countries","react_default","a","createElement","MapContainer","style","height","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedText","bindPopup","concat","Legend","legendItems","display","alignItems","map","item","key","title","backgroundColor","flex","justifyContent","textColor","fontWeight","fontSize","LegendItem","isFor","Object","classCallCheck","this","cases","LoadCountriesTask","today","moment","format","yesterday","subtract","nowddd","nowHH","setState","mapCountries","features","yesterdayDefcnt","todayDefcnt","getDay","_this","filtercnt","nation","cnt","filter","nationNmEn","indexOf","index","todayNatDefCnt","load","_callee","regenerator_default","wrap","_context","prev","next","Axios","get","then","res","body","response","items","objectSpread","natDefCnt","classPrivateFieldLooseBase","_processCovidData","stop","covidCountries","_loop","i","mapCountry","covidCountry","find","ISO_A3","confirmed","Number","_formatNumberWithCommas","_setCountryColor","length","legendItem","number","toString","replace","Covid19","_useState","useState","_useState2","slicedToArray","setCountries","legendItemsReverse","toConsumableArray","reverse","useEffect","Loading","components_map_CovidMap","map_Legend","Chart1","Load","setLoad","_useState3","_useState4","ConfirmedData","setConfirmedData","arrReverse","arr","window","scrollTo","dtData","makeWeek","post","makeData","labeling","labels","month","date","datasets","label","getColor","borderColor","borderWidth","fill","careCnt","year","createDt","createdt","enddt","hour","parseInt","Card","CardHeader","CardBody","es","Chart2","console","log","decideCnt","VisitorsMain","setLoadD","MONTHS","MONTHS2","colors","leaveKr","_useState5","_useState6","list","setlist","asyncToGenerator","mark","filterTenNation","apply","arguments","tmp","visitors","Fragment","Col","xl","lg","md","num","genLineData","InsightPage","props","sysToday","ReferencDate","substr","day","Page","className","description","breadcrumbs","active","Row","map_Covid19","chart_VisitorsMain","chart_Chart1","chart_Chart2"],"mappings":"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","file":"static/js/11.959a2d5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MapContainer, GeoJSON } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './CovidMap.css';\r\n\r\nconst CovidMap = ({ countries }) => {\r\n  const mapStyle = {\r\n    fillColor: 'white',\r\n    weight: 2,\r\n    color: 'black',\r\n    fillOpacity: 1,\r\n  };\r\n\r\n  const onEachCountry = (country, layer) => {\r\n    layer.options.fillColor = country.properties.color;\r\n    const name = country.properties.ADMIN;\r\n    const confirmedText = country.properties.confirmedText;\r\n    layer.bindPopup(`${name} ${confirmedText}`);\r\n  };\r\n\r\n  return (\r\n    <MapContainer style={{ height: '50vh' }} zoom={2} center={[20, 60]}>\r\n      <GeoJSON\r\n        style={mapStyle}\r\n        data={countries}\r\n        onEachFeature={onEachCountry}\r\n      />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default CovidMap;\r\n","import React from \"react\";\r\n\r\nconst Legend = ({ legendItems }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"stretch\",\r\n      }}\r\n    >\r\n      {legendItems.map((item) => (\r\n        <div\r\n          key={item.title}\r\n          style={{\r\n            backgroundColor: item.color,\r\n            flex: 1,\r\n            display: \"flex\",\r\n            alignItems: \"center\", // vertical\r\n            justifyContent: \"center\", // horiztontal\r\n            color: item.textColor != null ? item.textColor : \"black\",\r\n            fontWeight: \"bolder\",\r\n            fontSize: \"1em\",\r\n            height: \"7vh\",\r\n          }}\r\n        >\r\n          <span>{item.title}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;","class LegendItem {\r\n    constructor(title, color, isFor, textColor) {\r\n      this.title = title;\r\n      this.color = color;\r\n      this.isFor = isFor;\r\n      this.textColor = textColor != null ? textColor : textColor;\r\n    }\r\n  }\r\n  \r\n  export default LegendItem;","import LegendItem from \"entities/LegendItem.js\";\r\n\r\nvar legendItems = [\r\n  new LegendItem(\r\n    \"10,000 +\",\r\n    \"#741f1f\",\r\n    // \"#8b0000\",\r\n    (cases) => cases >= 10000,\r\n    \"white\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"5,000 - 9,999\",\r\n    // \"#741f1f\",\r\n    \"#9c2929\",\r\n    (cases) => cases >= 5000 && cases <10000,\r\n    \"White\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"1,000 - 4,999\",\r\n    \"#c57f7f\",\r\n    (cases) => cases >= 1000 && cases < 5000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"500 - 999\",\r\n    \"#d8aaaa\",\r\n    (cases) => cases >= 500 && cases < 1000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"0 - 500\",\r\n    \"#ebd4d4\",\r\n    (cases) => cases > 0 && cases < 500\r\n  ),\r\n\r\n  new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\r\n];\r\n\r\nexport default legendItems;\r\n\r\n/**\r\n * 7 > 1 million                        #8b0000\r\n * 6 >= 500 thousand < 1 million        #9e2a2a\r\n * 5 >= 200 thousand < 500 thousand     #b15555\r\n * 4 >= 100 thousand  < 200 Thousand    #c57f7f\r\n * 3 > 50 thousand < 100 thousand       #d8aaaa\r\n * 2 >= 0 < 50 thousand                 #ebd4d4\r\n * 1 NO DATA                            #ffffff\r\n */\r\n\r\n/*\r\n\r\n#741f1f // Really red\r\n#9c2929 // more red\r\n#c57f7f // red\r\n#d8aaaa //more pink\r\n#ebd4d4 //pink\r\n#ffffff //white\r\n*/","import Axios from 'axios';\r\nimport moment from 'moment';\r\nimport { features } from 'assets/geo-data/countries.json';\r\nimport legendItems from '../../entities/LegendItems';\r\nclass LoadCountriesTask {\r\n  today = moment().format('YYYYMMDD');\r\n  yesterday = moment().subtract(1, 'days').format('YYYYMMDD');\r\n  nowddd = moment().format('ddd');\r\n  nowHH = moment().format('HH');\r\n  setState = null;\r\n  mapCountries = features;\r\n  yesterdayDefcnt = [];\r\n  todayDefcnt = [];\r\n\r\n  getDay = () => {\r\n    if (this.nowddd == 'Sun') {\r\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(1, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowddd == 'Mon') {\r\n      this.today = moment(this.today).subtract(2, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(2, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowddd == 'Tue' && this.nowHH < 12) {\r\n      this.today = moment(this.today).subtract(3, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(3, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowddd == 'Tue' && this.nowHH >= 12) {\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(2, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowddd == 'Wed' && this.nowHH < 12) {\r\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(3, 'days')\r\n        .format('YYYYMMDD');\r\n    } else if (this.nowHH < 12) {\r\n      this.today = moment(this.today).subtract(1, 'days').format('YYYYMMDD');\r\n      this.yesterday = moment(this.yesterday)\r\n        .subtract(1, 'days')\r\n        .format('YYYYMMDD');\r\n    }\r\n  };\r\n\r\n  filtercnt = nation => {\r\n    this.cnt = 0;\r\n    this.todayDefcnt\r\n      .filter(item => item.nationNmEn.indexOf(nation) != -1)\r\n      .map((item, index) => {\r\n        if (nation === item.nationNmEn) {\r\n          this.cnt = item.todayNatDefCnt;\r\n        }\r\n      });\r\n    return this.cnt;\r\n  };\r\n\r\n  load = async setState => {\r\n    this.setState = setState;\r\n    this.getDay();\r\n    await Axios.get(`api/info/YesterdayCovid19Nat/${this.yesterday}`).then(\r\n      res => {\r\n        this.yesterdayDefcnt = res.data.data.body.response.body.items.item;\r\n      },\r\n    );\r\n    await Axios.get(`api/info/TodayCovid19Nat/${this.today}`).then(res => {\r\n      this.todayDefcnt = res.data.data.body.response.body.items.item;\r\n    });\r\n\r\n    this.todayDefcnt.map((item, index) => {\r\n      this.todayDefcnt[index] = {\r\n        ...this.todayDefcnt[index],\r\n        todayNatDefCnt: item.natDefCnt - this.yesterdayDefcnt[index].natDefCnt,\r\n      };\r\n    });\r\n\r\n    this.mapCountries.map((item, index) => {\r\n      item.properties = {\r\n        ...item.properties,\r\n        natDefCnt: this.filtercnt(item.properties.ADMIN),\r\n      };\r\n    });\r\n    this.#processCovidData(this.mapCountries);\r\n  };\r\n\r\n  #processCovidData = covidCountries => {\r\n    for (let i = 0; i < this.mapCountries.length; i++) {\r\n      const mapCountry = this.mapCountries[i];\r\n      const covidCountry = covidCountries.find(\r\n        covidCountry =>\r\n          covidCountry.properties.ISO_A3 === mapCountry.properties.ISO_A3,\r\n      );\r\n\r\n      mapCountry.properties.confirmed = 0;\r\n      mapCountry.properties.confirmedText = '0';\r\n\r\n      if (covidCountry != null) {\r\n        const confirmed = Number(covidCountry.properties.natDefCnt);\r\n        mapCountry.properties.confirmed = confirmed;\r\n        mapCountry.properties.confirmedText =\r\n          this.#formatNumberWithCommas(confirmed);\r\n      }\r\n\r\n      this.#setCountryColor(mapCountry);\r\n    }\r\n\r\n    this.setState(this.mapCountries);\r\n  };\r\n\r\n  #setCountryColor = country => {\r\n    const legendItem = legendItems.find(item =>\r\n      item.isFor(country.properties.confirmed),\r\n    );\r\n\r\n    if (legendItem != null) country.properties.color = legendItem.color;\r\n  };\r\n\r\n  #formatNumberWithCommas = number => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  };\r\n}\r\n\r\nexport default LoadCountriesTask;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Loading from './Loading';\r\nimport CovidMap from './CovidMap';\r\nimport Legend from './Legend';\r\nimport LoadCountriesTask from 'components/precleaning/LoadCountriesTask';\r\nimport legendItems from '../../entities/LegendItems';\r\n\r\nconst Covid19 = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const legendItemsReverse = [...legendItems].reverse();\r\n  const load = () => {\r\n    const loadCountriesTask = new LoadCountriesTask();\r\n    loadCountriesTask.load(setCountries);\r\n  };\r\n\r\n  useEffect(load, []);\r\n\r\n  return (\r\n    <div>\r\n      {countries.length === 0 ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <CovidMap countries={countries} />\r\n          <Legend legendItems={legendItemsReverse} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Covid19;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport Loading from '../map/Loading';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { getColor } from 'utils/colors';\r\n\r\nfunction Chart1() {\r\n  const [Load, setLoad] = useState(true);\r\n  const [ConfirmedData, setConfirmedData] = useState({});\r\n  let arrReverse = [];\r\n  let arr = [];\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    let dtData = makeWeek();\r\n    Axios.post(`/api/info/Covid19Chart1`, dtData).then(res => {\r\n      makeData(res.data.data.body.response.body.items.item);\r\n      arrReverse = [...arr].reverse();\r\n      setLoad(false);\r\n      labeling();\r\n    });\r\n  }, []);\r\n\r\n  const labeling = () => {\r\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\r\n    setConfirmedData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: '국내 치료 중인 환자 수',\r\n          backgroundColor: getColor('primary'),\r\n          borderColor: getColor('primary'),\r\n          borderWidth: 2,\r\n          fill: false,\r\n          data: arrReverse.map(a => a.careCnt),\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const makeData = items => {\r\n    items.map(item => {\r\n      arr = [\r\n        ...arr,\r\n        {\r\n          year: moment(item.createDt).format('YY'),\r\n          month: moment(item.createDt).format('MM'),\r\n          date: moment(item.createDt).format('DD'),\r\n          careCnt: item.careCnt,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const makeWeek = () => {\r\n    let hour = moment().format('HH');\r\n    let createdt;\r\n    let enddt;\r\n\r\n    if(parseInt(hour)<10){\r\n      createdt = moment().subtract(7, 'days').format('YYYYMMDD');\r\n      enddt = moment().subtract(1, 'days').format('YYYYMMDD');\r\n    } else {\r\n      createdt = moment().subtract(6, 'days').format('YYYYMMDD');\r\n      enddt = moment().format('YYYYMMDD');\r\n    }\r\n\r\n    let dtdata = {\r\n      createdt: createdt,\r\n      enddt: enddt,\r\n    }\r\n\r\n    return dtdata;\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>국내 치료 중인 환자 수</CardHeader>\r\n      <CardBody>\r\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Chart1;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport { getCovid19InfStateJson_URL, chanbi_key } from '../Config';\r\nimport Loading from '../map/Loading';\r\nimport { Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { getColor } from 'utils/colors';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction Chart2() {\r\n  const [Load, setLoad] = useState(true);\r\n  const [ConfirmedData, setConfirmedData] = useState({});\r\n  let arr = [];\r\n  let arrReverse = [];\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    let dtData = makeWeek();\r\n    console.log(dtData);\r\n    Axios.post(`/api/info/Covid19Chart2`, dtData).then(res => {\r\n      makeData(res.data.data.body.response.body.items.item);\r\n      arrReverse = [...arr].reverse();\r\n      setLoad(false);\r\n      labeling();\r\n    });\r\n  }, []);\r\n\r\n  const labeling = () => {\r\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\r\n    setConfirmedData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: '국내 누적 확진자',\r\n          backgroundColor: getColor('primary'),\r\n          borderColor: getColor('primary'),\r\n          borderWidth: 2,\r\n          fill: false,\r\n          data: arrReverse.map(a => a.decideCnt),\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const makeData = items => {\r\n    items.map(item => {\r\n      arr = [\r\n        ...arr,\r\n        {\r\n          year: moment(item.createDt).format('YY'),\r\n          month: moment(item.createDt).format('MM'),\r\n          date: moment(item.createDt).format('DD'),\r\n          decideCnt: item.decideCnt,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const makeWeek = () => {\r\n    let hour = moment('2021-11-26 09:00:00','YYYY-MM-DD HH:mm:ss').format('HH');\r\n    let createdt;\r\n    let enddt;\r\n\r\n    if(parseInt(hour)<10){\r\n      createdt = moment().subtract(7, 'days').format('YYYYMMDD');\r\n      enddt = moment().subtract(1, 'days').format('YYYYMMDD');\r\n    } else {\r\n      createdt = moment().subtract(6, 'days').format('YYYYMMDD');\r\n      enddt = moment().format('YYYYMMDD');\r\n    }\r\n\r\n    let dtdata = {\r\n      createdt: createdt,\r\n      enddt: enddt,\r\n    }\r\n\r\n    return dtdata;\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>국내 누적 확진자</CardHeader>\r\n      <CardBody>\r\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Chart2;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Col, Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { getColor } from 'utils/colors';\r\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\r\nimport Loading from '../map/Loading';\r\nimport { visitors } from '../../assets/geo-data/visitorsList.json';\r\n\r\nfunction VisitorsMain() {\r\n  const [Load, setLoad] = useState(true);\r\n  const [LoadD, setLoadD] = useState(true);\r\n  const MONTHS = [\r\n    '1월',\r\n    '2월',\r\n    '3월',\r\n    '4월',\r\n    '5월',\r\n    '6월',\r\n    '7월',\r\n    '8월',\r\n    '9월',\r\n    '10월',\r\n  ];\r\n  const MONTHS2 = [\r\n    '1월',\r\n    '2월',\r\n    '3월',\r\n    '4월',\r\n    '5월',\r\n    '6월',\r\n    '7월',\r\n    '8월',\r\n    '9월',\r\n  ];\r\n\r\n  const colors=[\r\n    'primary','pink','success','danger','warning','info','navy','blackgray','special'\r\n  ]\r\n\r\n  const leaveKr = [\r\n    86143, 68213, 79446, 71302, 75416, 73999, 116615, 101963, 137712, 124399,\r\n  ];\r\n  const [list, setlist] = useState([]);\r\n\r\n  useEffect(() => {\r\n    load();\r\n  }, []);\r\n  const load = async () => {\r\n    setlist(filterTenNation());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (list !== []) {\r\n      setLoad(false);\r\n      setLoadD(false);\r\n    }\r\n  }, [list]);\r\n\r\n  const filterTenNation = () => {\r\n    let tmp = [];\r\n    visitors\r\n      .filter(\r\n        item =>\r\n          item.name.indexOf('일본') != -1 ||\r\n          item.name.indexOf('태국') != -1 ||\r\n          item.name.indexOf('괌') != -1 ||\r\n          item.name.indexOf('싱가포르') != -1 ||\r\n          item.name.indexOf('독일') != -1 ||\r\n          item.name.indexOf('캐나다') != -1 ||\r\n          item.name.indexOf('멕시코') != -1 ||\r\n          item.name.indexOf('도미니카 공화국') != -1 ||\r\n          item.name.indexOf('오스트리아') != -1,\r\n      )\r\n      .map(data => {\r\n        if (\r\n          data.name === '일본' ||\r\n          data.name === '태국' ||\r\n          data.name === '괌' ||\r\n          data.name === '싱가포르' ||\r\n          data.name === '독일' ||\r\n          data.name === '캐나다' ||\r\n          data.name === '멕시코' ||\r\n          data.name === '도미니카 공화국' ||\r\n          data.name === '오스트리아'\r\n        ) {\r\n          tmp = [...tmp, data];\r\n        }\r\n      });\r\n    return tmp;\r\n  };\r\n\r\n  const genLineData = () => {\r\n    let data = [];\r\n    let tmp = {\r\n      label: ``,\r\n      backgroundColor: getColor('primary'),\r\n      borderColor: getColor('primary'),\r\n      borderWidth: 1,\r\n      data: [],\r\n      fill: false,\r\n    };\r\n    for (let i = 0; i < 8; i++) {\r\n      tmp = {\r\n        ...tmp,\r\n        label: list[i].name,\r\n        data: list[i].num,\r\n        backgroundColor: getColor(colors[i]),\r\n        borderColor: getColor(colors[i]),\r\n      };\r\n      data = [...data, tmp];\r\n    }\r\n    return {\r\n      labels: MONTHS2,\r\n      datasets: data,\r\n    };\r\n  };\r\n\r\n  const genBarData = data => {\r\n    return {\r\n      labels: MONTHS,\r\n      datasets: [\r\n        {\r\n          label: `한국 출국자 수`,\r\n          backgroundColor: getColor('primary'),\r\n          borderColor: getColor('primary'),\r\n          borderWidth: 1,\r\n          data: data,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const genPieData = () => {\r\n    return {\r\n      datasets: [\r\n        {\r\n          data: [\r\n            20400, 2200, 1160, 573, 516, 394, 278, 229, 82, 34, 11, 4, 3, 1, 1,\r\n            111826,\r\n          ],\r\n          backgroundColor: [getColor('primary'), getColor('secondary')],\r\n          label: 'Dataset 1',\r\n        },\r\n      ],\r\n      labels: [\r\n        '미국',\r\n        '일본',\r\n        '터키',\r\n        '괌',\r\n        '싱가포르',\r\n        '대만',\r\n        '도미니카 공화국',\r\n        '슬로베니아',\r\n        '홍콩',\r\n        '스와질랜드',\r\n        '스리랑카',\r\n        '세이셸',\r\n        '모리셔스',\r\n        '마카오',\r\n        '세르비아',\r\n        '그 외 국가(목적지 불명?)',\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Col xl={6} lg={12} md={12}>\r\n        <Card>\r\n          <CardHeader>2021년 월별 한국 출국자 수</CardHeader>\r\n          <CardBody>\r\n            {Load === true ? <Loading /> : <Bar data={genBarData(leaveKr)} />}\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n      <Col xl={6} lg={12} md={12}>\r\n        <Card>\r\n          <CardHeader>2021년 1월~9월 목적지 별 한국 출국자 수</CardHeader>\r\n          <CardBody>\r\n            {Load === true ? <Loading /> : <Line data={genLineData(leaveKr)} />}\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n      {/* <Col xl={6} lg={12} md={12}>\r\n        <Card>\r\n          <CardHeader>2021년 9월 목적지 별 출국자 수</CardHeader>\r\n          <CardBody>\r\n            {LoadD === true ? <Loading /> : <Doughnut data={genPieData()} />}\r\n          </CardBody>\r\n        </Card>\r\n      </Col> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VisitorsMain;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Covid19 from 'components/map/Covid19.jsx';\r\nimport Chart1 from '../chart/Chart1';\r\nimport Chart2 from '../chart/Chart2';\r\nimport VisitorsMain from '../chart/VisitorsMain';\r\nimport Page from 'components/Page';\r\nimport { Col, Row } from 'reactstrap';\r\nimport moment from 'moment';\r\n\r\nfunction InsightPage(props) {\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  let nowddd = moment().format('ddd');\r\n  let nowHH = moment().format('HH');\r\n  let sysToday = moment().format('YYYYMMDD');\r\n\r\n  const getDay = () => {\r\n    let t = '';\r\n    if (nowddd == 'Sun') {\r\n      t = moment(sysToday).subtract(1, 'days').format('YYYYMMDD');\r\n    } else if (nowddd == 'Mon') {\r\n      t = moment(sysToday).subtract(2, 'days').format('YYYYMMDD');\r\n    } else if (nowddd == 'Tue' && nowHH < 12) {\r\n      t = moment(sysToday).subtract(3, 'days').format('YYYYMMDD');\r\n    } else if (nowddd == 'Tue' && nowHH >= 12) {\r\n      t = sysToday;\r\n    } else if (nowddd == 'Wed' && nowHH < 12) {\r\n      t = moment(sysToday).subtract(1, 'days').format('YYYYMMDD');\r\n    } else if (nowHH < 12) {\r\n      t = moment(sysToday).subtract(1, 'days').format('YYYYMMDD');\r\n    } else {\r\n      t = sysToday;\r\n    }\r\n    return t;\r\n  };\r\n\r\n  const ReferencDate = getDay();\r\n  ReferencDate.toString()\r\n  const year = ReferencDate.substr(0,4);\r\n  const month = ReferencDate.substr(4,2);\r\n  const day = ReferencDate.substr(6,2);\r\n\r\n  return (\r\n    <Page\r\n      className=\"InsightPage\"\r\n      title=\"여행 종합 도표\"\r\n      description={\"국가별 여행정보를 시각화하여 제공합니다. 지도를 클릭하여 일일 확진자 수를 확인해 보세요. (※ 한국시간 기준 \"+year+\"년 \"+ month +\"월 \"+ day+\"일에 업데이트 되었습니다.)\"}\r\n      breadcrumbs={[{ name: 'Insight', active: true }]}\r\n    >\r\n      <Row>\r\n        <Col>\r\n          <Covid19 />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <VisitorsMain />\r\n      </Row>\r\n      <Row>\r\n        <Col xl={6} lg={12} md={12}>\r\n          <Chart1 />\r\n        </Col>\r\n        <Col xl={6} lg={12} md={12}>\r\n          <Chart2 />\r\n        </Col>\r\n      </Row>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default InsightPage;\r\n"],"sourceRoot":""}