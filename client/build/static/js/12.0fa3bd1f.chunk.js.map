{"version":3,"sources":["components/map/Loading.jsx","components/map/CovidMap.jsx","components/map/Legend.jsx","entities/LegendItem.js","entities/LegendItems.js","components/precleaning/LoadCountriesTask.js","components/map/Covid19.jsx","utils/colors.js","components/chart/Chart1.js","components/chart/Chart2.js","components/views/InsightPage.js"],"names":["Loading","react_default","a","createElement","style","height","display","justifyContent","className","role","CovidMap","_ref","countries","MapContainer","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedText","bindPopup","concat","Legend","legendItems","alignItems","map","item","key","title","backgroundColor","flex","textColor","fontWeight","fontSize","LegendItem","isFor","Object","classCallCheck","this","cases","LoadCountriesTask","today","moment","format","yesterday","subtract","setState","mapCountries","features","yesterdayDefcnt","todayDefcnt","filtercnt","nation","_this","cnt","filter","nationNmEn","indexOf","index","todayNatDefCnt","load","_callee","regenerator_default","wrap","_context","prev","next","Axios","get","then","res","body","response","items","objectSpread","natDefCnt","classPrivateFieldLooseBase","_processCovidData","stop","covidCountries","_loop","i","mapCountry","covidCountry","find","ISO_A3","confirmed","Number","_formatNumberWithCommas","_setCountryColor","length","legendItem","number","toString","replace","Covid19","_useState","useState","_useState2","slicedToArray","setCountries","legendItemsReverse","toConsumableArray","reverse","useEffect","map_Loading","components_map_CovidMap","map_Legend","getColor","availableColor","arguments","undefined","window","getComputedStyle","document","documentElement","getPropertyValue","Chart1","Load","setLoad","_useState3","_useState4","ConfirmedData","setConfirmedData","arrReverse","arr","scrollTo","makeData","labeling","labels","month","date","datasets","label","borderColor","borderWidth","fill","careCnt","year","createDt","Card","CardHeader","CardBody","es","Chart2","endpointInfo","getCovid19InfStateJson_URL","chanbi_key","decideCnt","InsightPage","props","Page","Row","Col","map_Covid19","xl","lg","md","chart_Chart1","chart_Chart2"],"mappings":"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","file":"static/js/12.0fa3bd1f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div style={{height:\"70h\",display:\"flex\", justifyContent:\"center\"}}>\r\n     <div className=\"spinner-grow text-warning\" role=\"status\">\r\n        <span className=\"visually-hidden\"></span>\r\n     </div>\r\n     <div className=\"spinner-grow text-warning\" role=\"status\">\r\n        <span className=\"visually-hidden\"></span>\r\n     </div>\r\n     <div className=\"spinner-grow text-warning\" role=\"status\">\r\n        <span className=\"visually-hidden\"></span>\r\n     </div>\r\n    </div>\r\n    );\r\n};\r\n \r\nexport default Loading;","import React from 'react'\r\nimport {MapContainer, GeoJSON} from \"react-leaflet\"\r\nimport \"leaflet/dist/leaflet.css\"\r\nimport \"./CovidMap.css\"\r\n\r\nconst CovidMap = ({countries}) => {\r\n    const mapStyle ={\r\n        fillColor:\"white\",\r\n        weight:2,\r\n        color:\"black\",\r\n        fillOpacity:1,\r\n    };\r\n    \r\n    const onEachCountry = (country, layer) => {\r\n        layer.options.fillColor = country.properties.color;\r\n        const name = country.properties.ADMIN;\r\n        const confirmedText = country.properties.confirmedText;\r\n        layer.bindPopup(`${name} ${confirmedText}`);\r\n      };\r\n\r\n      return (\r\n        <MapContainer style={{ height: \"50vh\" }} zoom={2} center={[20, 60]}>\r\n          <GeoJSON\r\n            style={mapStyle}\r\n            data={countries}\r\n            onEachFeature={onEachCountry}\r\n          />\r\n        </MapContainer>\r\n      );\r\n    };\r\n \r\nexport default CovidMap;","import React from \"react\";\r\n\r\nconst Legend = ({ legendItems }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"stretch\",\r\n      }}\r\n    >\r\n      {legendItems.map((item) => (\r\n        <div\r\n          key={item.title}\r\n          style={{\r\n            backgroundColor: item.color,\r\n            flex: 1,\r\n            display: \"flex\",\r\n            alignItems: \"center\", // vertical\r\n            justifyContent: \"center\", // horiztontal\r\n            color: item.textColor != null ? item.textColor : \"black\",\r\n            fontWeight: \"bolder\",\r\n            fontSize: \"1em\",\r\n            height: \"7vh\",\r\n          }}\r\n        >\r\n          <span>{item.title}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;","class LegendItem {\r\n    constructor(title, color, isFor, textColor) {\r\n      this.title = title;\r\n      this.color = color;\r\n      this.isFor = isFor;\r\n      this.textColor = textColor != null ? textColor : textColor;\r\n    }\r\n  }\r\n  \r\n  export default LegendItem;","import LegendItem from \"entities/LegendItem.js\";\r\n\r\nvar legendItems = [\r\n  new LegendItem(\r\n    \"10,000 +\",\r\n    \"#741f1f\",\r\n    // \"#8b0000\",\r\n    (cases) => cases >= 10000,\r\n    \"white\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"5,000 - 9,999\",\r\n    // \"#741f1f\",\r\n    \"#9c2929\",\r\n    (cases) => cases >= 5000 && cases <10000,\r\n    \"White\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"1,000 - 4,999\",\r\n    \"#c57f7f\",\r\n    (cases) => cases >= 1000 && cases < 5000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"500 - 999\",\r\n    \"#d8aaaa\",\r\n    (cases) => cases >= 500 && cases < 1000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"0 - 500\",\r\n    \"#ebd4d4\",\r\n    (cases) => cases > 0 && cases < 500\r\n  ),\r\n\r\n  new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\r\n];\r\n\r\nexport default legendItems;\r\n\r\n/**\r\n * 7 > 1 million                        #8b0000\r\n * 6 >= 500 thousand < 1 million        #9e2a2a\r\n * 5 >= 200 thousand < 500 thousand     #b15555\r\n * 4 >= 100 thousand  < 200 Thousand    #c57f7f\r\n * 3 > 50 thousand < 100 thousand       #d8aaaa\r\n * 2 >= 0 < 50 thousand                 #ebd4d4\r\n * 1 NO DATA                            #ffffff\r\n */\r\n\r\n/*\r\n\r\n#741f1f // Really red\r\n#9c2929 // more red\r\n#c57f7f // red\r\n#d8aaaa //more pink\r\n#ebd4d4 //pink\r\n#ffffff //white\r\n*/","import Axios from 'axios';\r\nimport moment from 'moment';\r\nimport { features } from 'assets/geo-data/countries.json';\r\nimport legendItems from '../../entities/LegendItems';\r\nclass LoadCountriesTask {\r\n  today = moment().format('YYYYMMDD');\r\n  yesterday = moment().subtract(1, 'days').format('YYYYMMDD');\r\n  setState = null;\r\n  mapCountries = features;\r\n  yesterdayDefcnt = [];\r\n  todayDefcnt = [];\r\n\r\n  filtercnt = nation => {\r\n    this.cnt = 0;\r\n    this.todayDefcnt\r\n      .filter(item => item.nationNmEn.indexOf(nation) != -1)\r\n      .map((item, index) => {\r\n        if (nation === item.nationNmEn) {\r\n          this.cnt = item.todayNatDefCnt;\r\n        }\r\n      });\r\n    return this.cnt;\r\n  };\r\n\r\n  load = async setState => {\r\n    this.setState = setState;\r\n    await Axios.get(`api/info/YesterdayCovid19Nat`).then(res => {\r\n      this.yesterdayDefcnt = res.data.data.body.response.body.items.item;\r\n    });\r\n    await Axios.get(`api/info/TodayCovid19Nat`).then(res => {\r\n      this.todayDefcnt = res.data.data.body.response.body.items.item;\r\n    });\r\n\r\n    this.todayDefcnt.map((item, index) => {\r\n      this.todayDefcnt[index] = {\r\n        ...this.todayDefcnt[index],\r\n        todayNatDefCnt: item.natDefCnt - this.yesterdayDefcnt[index].natDefCnt,\r\n      };\r\n    });\r\n\r\n    this.mapCountries.map((item, index) => {\r\n      item.properties = {\r\n        ...item.properties,\r\n        natDefCnt: this.filtercnt(item.properties.ADMIN),\r\n      };\r\n    });\r\n    this.#processCovidData(this.mapCountries);\r\n  };\r\n\r\n  #processCovidData = covidCountries => {\r\n    for (let i = 0; i < this.mapCountries.length; i++) {\r\n      const mapCountry = this.mapCountries[i];\r\n      const covidCountry = covidCountries.find(\r\n        covidCountry =>\r\n          covidCountry.properties.ISO_A3 === mapCountry.properties.ISO_A3,\r\n      );\r\n\r\n      mapCountry.properties.confirmed = 0;\r\n      mapCountry.properties.confirmedText = '0';\r\n\r\n      if (covidCountry != null) {\r\n        const confirmed = Number(covidCountry.properties.natDefCnt);\r\n        mapCountry.properties.confirmed = confirmed;\r\n        mapCountry.properties.confirmedText =\r\n          this.#formatNumberWithCommas(confirmed);\r\n      }\r\n\r\n      this.#setCountryColor(mapCountry);\r\n    }\r\n\r\n    this.setState(this.mapCountries);\r\n  };\r\n\r\n  #setCountryColor = country => {\r\n    const legendItem = legendItems.find(item =>\r\n      item.isFor(country.properties.confirmed),\r\n    );\r\n\r\n    if (legendItem != null) country.properties.color = legendItem.color;\r\n  };\r\n\r\n  #formatNumberWithCommas = number => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  };\r\n}\r\n\r\nexport default LoadCountriesTask;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Loading from './Loading';\r\nimport CovidMap from './CovidMap';\r\nimport Legend from './Legend';\r\nimport LoadCountriesTask from 'components/precleaning/LoadCountriesTask';\r\nimport legendItems from '../../entities/LegendItems';\r\n\r\nconst Covid19 = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const legendItemsReverse = [...legendItems].reverse();\r\n  const load = () => {\r\n    const loadCountriesTask = new LoadCountriesTask();\r\n    loadCountriesTask.load(setCountries);\r\n  };\r\n\r\n  useEffect(load, []);\r\n\r\n  return (\r\n    <div>\r\n      {countries.length === 0 ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <CovidMap countries={countries} />\r\n          <Legend legendItems={legendItemsReverse} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Covid19;\r\n","// const availableColors = [\r\n//   'blue',\r\n//   'indigo',\r\n//   'purple',\r\n//   'pink',\r\n//   'red',\r\n//   'orange',\r\n//   'yellow',\r\n//   'green',\r\n//   'teal',\r\n//   'cyan',\r\n//   'white',\r\n//   'gray',\r\n//   'gray-dark',\r\n//   'primary',\r\n//   'secondary',\r\n//   'success',\r\n//   'info',\r\n//   'warning',\r\n//   'danger',\r\n//   'light',\r\n//   'dark',\r\n// ];\r\n\r\nexport const getColor = (availableColor = 'primary') => {\r\n  if (typeof window === 'undefined') {\r\n    return null;\r\n  }\r\n\r\n  const color = window\r\n    .getComputedStyle(document.documentElement)\r\n    .getPropertyValue(`--${availableColor}`);\r\n\r\n  return color;\r\n};\r\n\r\nexport const getThemeColors = () => [\r\n  'primary',\r\n  'secondary',\r\n  'success',\r\n  'info',\r\n  'warning',\r\n  'danger',\r\n];\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport Loading from '../map/Loading';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { getColor } from 'utils/colors';\r\n\r\nfunction Chart1() {\r\n  const [Load, setLoad] = useState(true);\r\n  const [ConfirmedData, setConfirmedData] = useState({});\r\n  let arrReverse = [];\r\n  let arr = [];\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    Axios.get(`/api/info/Covid19`).then(res => {\r\n      makeData(res.data.data.body.response.body.items.item);\r\n      arrReverse = [...arr].reverse();\r\n      setLoad(false);\r\n      labeling();\r\n    });\r\n  }, []);\r\n\r\n  const labeling = () => {\r\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\r\n    setConfirmedData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: '국내 치료 중인 환자 수',\r\n          backgroundColor: getColor('primary'),\r\n          borderColor: getColor('primary'),\r\n          borderWidth: 2,\r\n          fill: false,\r\n          data: arrReverse.map(a => a.careCnt),\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const makeData = items => {\r\n    items.map(item => {\r\n      arr = [\r\n        ...arr,\r\n        {\r\n          year: moment(item.createDt).format('YY'),\r\n          month: moment(item.createDt).format('MM'),\r\n          date: moment(item.createDt).format('DD'),\r\n          careCnt: item.careCnt,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>국내 치료 중인 환자 수</CardHeader>\r\n      <CardBody>\r\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Chart1;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport { getCovid19InfStateJson_URL, chanbi_key } from '../Config';\r\nimport Loading from '../map/Loading';\r\nimport { Card, CardBody, CardHeader } from 'reactstrap';\r\nimport { getColor } from 'utils/colors';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction Chart2() {\r\n  const [Load, setLoad] = useState(true);\r\n  const [ConfirmedData, setConfirmedData] = useState({});\r\n  let arr = [];\r\n  let arrReverse = [];\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    let endpointInfo = `${getCovid19InfStateJson_URL}?serviceKey=${chanbi_key}&startCreateDt=20211108&endCreateDt=2021112`;\r\n    Axios.get(endpointInfo).then(res => {\r\n      makeData(res.data.response.body.items.item);\r\n      arrReverse = [...arr].reverse();\r\n      setLoad(false);\r\n      labeling();\r\n    });\r\n    Axios.get(`/api/info/Covid19`).then(res => {\r\n      makeData(res.data.data.body.response.body.items.item);\r\n      arrReverse = [...arr].reverse();\r\n      setLoad(false);\r\n      labeling();\r\n    });\r\n  }, []);\r\n\r\n  const labeling = () => {\r\n    const labels = arrReverse.map(a => `${a.month}월 ${a.date}일`);\r\n    setConfirmedData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: '국내 누적 확진자',\r\n          backgroundColor: getColor('secondary'),\r\n          borderColor: getColor('secondary'),\r\n          borderWidth: 2,\r\n          fill: false,\r\n          data: arrReverse.map(a => a.decideCnt),\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const makeData = items => {\r\n    items.map(item => {\r\n      arr = [\r\n        ...arr,\r\n        {\r\n          year: moment(item.createDt).format('YY'),\r\n          month: moment(item.createDt).format('MM'),\r\n          date: moment(item.createDt).format('DD'),\r\n          decideCnt: item.decideCnt,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>국내 누적 확진자</CardHeader>\r\n      <CardBody>\r\n        {Load === true ? <Loading /> : <Line data={ConfirmedData} />}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Chart2;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Covid19 from 'components/map/Covid19.jsx';\r\nimport Chart1 from '../chart/Chart1';\r\nimport Chart2 from '../chart/Chart2';\r\nimport Page from 'components/Page';\r\nimport { Col, Row } from 'reactstrap';\r\n\r\nfunction InsightPage(props) {\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <Page>\r\n      <Row>\r\n        <Col>\r\n          <Covid19 />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xl={6} lg={12} md={12}>\r\n          <Chart1 />\r\n        </Col>\r\n        <Col xl={6} lg={12} md={12}>\r\n          <Chart2 />\r\n        </Col>\r\n      </Row>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport default InsightPage;\r\n"],"sourceRoot":""}